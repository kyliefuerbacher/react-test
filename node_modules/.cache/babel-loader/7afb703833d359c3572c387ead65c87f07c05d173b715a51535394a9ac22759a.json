{"ast":null,"code":"var _jsxFileName = \"/Users/kyliefuerbacher/Documents/GitHub/react-test/src/components/FileTransformer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileTransformer = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [file, setFile] = useState(null);\n  function getTargetHeaders() {\n    // Define the default mapping rules and extract the target headers\n    const defaultMappingRules = {\n      'Epoch_PK_Study': 'PK Study',\n      'Dosing_Group': 'Dosing Group',\n      'Investigator_2': 'Secondary Investigator',\n      'Bioanalyst_1': 'Primary Bioanalyst',\n      'Bioanalyst_2': 'Secondary Bioanalyst',\n      'Pharmaceutics_Rep': 'Primary Pharmaceutical Representative',\n      'Pharmaceutics_Rep_2': 'Secondary Pharmaceutical Representative',\n      'Compound_Received_DateTime': 'Compound Received Timestamp',\n      'Creation_Date': 'Study Creation Date',\n      'Modified_Date': 'Study Modification Date',\n      'Submitter': 'Study Submitted By',\n      'Requestor': 'Study Requestor',\n      'Assay_Type': 'Assay Type'\n    };\n    return defaultMappingRules;\n  }\n  function transformHeaders(sourceHeaders, mappingRules) {\n    // Transform the source headers based on the mapping rules\n    const transformedHeaders = sourceHeaders.map(header => {\n      return mappingRules[header] || header;\n    });\n    return transformedHeaders;\n  }\n  function onFileChange(e) {\n    setFile(e.target.files[0]);\n  }\n  function onTransformButtonClick() {\n    if (!file) {\n      setMessage('No file selected.');\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = function (e) {\n      const content = e.target.result;\n      const [headers, ...rows] = parseCSV(content);\n      if (!headers || !rows || headers.length === 0) {\n        setMessage('Error: Unsupported file format. Please select a CSV or Excel file.');\n        return;\n      }\n      const mappingRules = getTargetHeaders();\n      const transformedHeaders = transformHeaders(headers, mappingRules);\n\n      // Convert transformed headers and rows back to CSV format\n      let transformedCSV = [transformedHeaders.join(',')].concat(rows.map(row => row.join(','))).join('\\n');\n\n      // Download the transformed data as a CSV file\n      downloadCSV(transformedCSV, 'transformed_data.csv');\n      setMessage('Header transformation completed successfully.');\n    };\n\n    // Read the file content\n    if (file.name.endsWith('.csv') || file.name.endsWith('.xls') || file.name.endsWith('.xlsx')) {\n      fileReader.readAsText(file);\n    } else {\n      setMessage('Error: Unsupported file format. Please select a CSV or Excel file.');\n    }\n  }\n  function parseCSV(csvContent) {\n    // Parse CSV content and return the data as an array of arrays\n    const rows = csvContent.trim().split('\\n');\n    if (rows.length < 2) {\n      return null;\n    }\n    const headers = rows[0].split(',');\n    const data = [];\n    for (let i = 1; i < rows.length; i++) {\n      data.push(rows[i].split(','));\n    }\n    return [headers, ...data];\n  }\n  function downloadCSV(csvContent, fileName) {\n    // Download the CSV content as a file\n    const blob = new Blob([csvContent], {\n      type: 'text/csv'\n    });\n    const url = URL.createObjectURL(blob);\n\n    // Create a temporary anchor element to trigger the download\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    a.style.display = 'none';\n    document.body.appendChild(a);\n\n    // Trigger the click event on the anchor element\n    a.click();\n\n    // Clean up\n    URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: 30\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: onFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onTransformButtonClick,\n      children: \"Transform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(FileTransformer, \"JNZChlW0DcwvQdj9z3nULd07RRY=\");\n_c = FileTransformer;\nexport default FileTransformer;\nvar _c;\n$RefreshReg$(_c, \"FileTransformer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FileTransformer","_s","message","setMessage","file","setFile","getTargetHeaders","defaultMappingRules","transformHeaders","sourceHeaders","mappingRules","transformedHeaders","map","header","onFileChange","e","target","files","onTransformButtonClick","fileReader","FileReader","onload","content","result","headers","rows","parseCSV","length","transformedCSV","join","concat","row","downloadCSV","name","endsWith","readAsText","csvContent","trim","split","data","i","push","fileName","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","style","display","body","appendChild","click","revokeObjectURL","removeChild","margin","children","onChange","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/kyliefuerbacher/Documents/GitHub/react-test/src/components/FileTransformer.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst FileTransformer = () => {\n  const [message, setMessage] = useState('');\n  const [file, setFile] = useState(null);\n\n  function getTargetHeaders() {\n    // Define the default mapping rules and extract the target headers\n    const defaultMappingRules = {\n      'Epoch_PK_Study': 'PK Study',\n      'Dosing_Group': 'Dosing Group',\n      'Investigator_2': 'Secondary Investigator',\n      'Bioanalyst_1': 'Primary Bioanalyst',\n      'Bioanalyst_2': 'Secondary Bioanalyst',\n      'Pharmaceutics_Rep': 'Primary Pharmaceutical Representative',\n      'Pharmaceutics_Rep_2': 'Secondary Pharmaceutical Representative',\n      'Compound_Received_DateTime': 'Compound Received Timestamp',\n      'Creation_Date': 'Study Creation Date',\n      'Modified_Date': 'Study Modification Date',\n      'Submitter': 'Study Submitted By',\n      'Requestor': 'Study Requestor',\n      'Assay_Type': 'Assay Type'\n    };\n    return defaultMappingRules;\n  }\n\n  function transformHeaders(sourceHeaders, mappingRules) {\n    // Transform the source headers based on the mapping rules\n    const transformedHeaders = sourceHeaders.map(header => {\n      return mappingRules[header] || header;\n    });\n    return transformedHeaders;\n  }\n\n  function onFileChange(e) {\n    setFile(e.target.files[0]);\n  }\n\n  function onTransformButtonClick() {\n    if (!file) {\n      setMessage('No file selected.');\n      return;\n    }\n\n    const fileReader = new FileReader();\n    fileReader.onload = function (e) {\n      const content = e.target.result;\n      const [headers, ...rows] = parseCSV(content);\n\n      if (!headers || !rows || headers.length === 0) {\n        setMessage('Error: Unsupported file format. Please select a CSV or Excel file.');\n        return;\n      }\n\n      const mappingRules = getTargetHeaders();\n      const transformedHeaders = transformHeaders(headers, mappingRules);\n\n      // Convert transformed headers and rows back to CSV format\n      let transformedCSV = [transformedHeaders.join(',')].concat(rows.map(row => row.join(','))).join('\\n');\n\n      // Download the transformed data as a CSV file\n      downloadCSV(transformedCSV, 'transformed_data.csv');\n\n      setMessage('Header transformation completed successfully.');\n    };\n\n    // Read the file content\n    if (file.name.endsWith('.csv') || file.name.endsWith('.xls') || file.name.endsWith('.xlsx')) {\n      fileReader.readAsText(file);\n    } else {\n      setMessage('Error: Unsupported file format. Please select a CSV or Excel file.');\n    }\n  }\n\n  function parseCSV(csvContent) {\n    // Parse CSV content and return the data as an array of arrays\n    const rows = csvContent.trim().split('\\n');\n    if (rows.length < 2) {\n      return null;\n    }\n\n    const headers = rows[0].split(',');\n    const data = [];\n    for (let i = 1; i < rows.length; i++) {\n      data.push(rows[i].split(','));\n    }\n\n    return [headers, ...data];\n  }\n\n  function downloadCSV(csvContent, fileName) {\n    // Download the CSV content as a file\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n\n    // Create a temporary anchor element to trigger the download\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    a.style.display = 'none';\n    document.body.appendChild(a);\n\n    // Trigger the click event on the anchor element\n    a.click();\n\n    // Clean up\n    URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  }\n\n  return (\n    <div style={{ margin: 30}}>\n      <input type=\"file\" onChange={onFileChange} />\n      <button onClick={onTransformButtonClick}>Transform</button>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nexport default FileTransformer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}