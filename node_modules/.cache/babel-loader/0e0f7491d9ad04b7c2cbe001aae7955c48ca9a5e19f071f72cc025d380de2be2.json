{"ast":null,"code":"// backend/app.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Connect to MongoDB\nconst MONGODB_URI = 'mongodb://localhost:27017/mydatabase'; // Replace 'mydatabase' with your MongoDB database name\nmongoose.connect(MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('Connected to MongoDB')).catch(error => console.error('Error connecting to MongoDB:', error));\n\n// Define a sample data collection schema\nconst sampleSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  }\n});\nconst SampleModel = mongoose.model('Sample', sampleSchema);\n\n// CORS middleware\napp.use(cors());\n\n// Fetch data from MongoDB\napp.get('/api/data', async (req, res) => {\n  try {\n    const data = await SampleModel.find();\n    res.json(data);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching data from MongoDB'\n    });\n  }\n});\napp.listen(PORT, () => console.log(`Server started on port ${PORT}`));","map":{"version":3,"names":["express","require","mongoose","cors","app","PORT","process","env","MONGODB_URI","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","error","sampleSchema","Schema","name","type","String","required","SampleModel","model","use","get","req","res","data","find","json","status","message","listen"],"sources":["/Users/kyliefuerbacher/Documents/GitHub/react-test/src/App.js"],"sourcesContent":["// backend/app.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Connect to MongoDB\nconst MONGODB_URI = 'mongodb://localhost:27017/mydatabase'; // Replace 'mydatabase' with your MongoDB database name\nmongoose.connect(MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB'))\n  .catch((error) => console.error('Error connecting to MongoDB:', error));\n\n// Define a sample data collection schema\nconst sampleSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n});\n\nconst SampleModel = mongoose.model('Sample', sampleSchema);\n\n// CORS middleware\napp.use(cors());\n\n// Fetch data from MongoDB\napp.get('/api/data', async (req, res) => {\n  try {\n    const data = await SampleModel.find();\n    res.json(data);\n  } catch (error) {\n    res.status(500).json({ message: 'Error fetching data from MongoDB' });\n  }\n});\n\napp.listen(PORT, () => console.log(`Server started on port ${PORT}`));\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;;AAErC;AACA,MAAMG,WAAW,GAAG,sCAAsC,CAAC,CAAC;AAC5DN,QAAQ,CAACO,OAAO,CAACD,WAAW,EAAE;EAAEE,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC,CAC/EC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAC/CC,KAAK,CAAEC,KAAK,IAAKH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC;;AAEzE;AACA,MAAMC,YAAY,GAAG,IAAIf,QAAQ,CAACgB,MAAM,CAAC;EACvCC,IAAI,EAAE;IAAEC,IAAI,EAAEC,MAAM;IAAEC,QAAQ,EAAE;EAAK;AACvC,CAAC,CAAC;AAEF,MAAMC,WAAW,GAAGrB,QAAQ,CAACsB,KAAK,CAAC,QAAQ,EAAEP,YAAY,CAAC;;AAE1D;AACAb,GAAG,CAACqB,GAAG,CAACtB,IAAI,CAAC,CAAC,CAAC;;AAEf;AACAC,GAAG,CAACsB,GAAG,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACvC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMN,WAAW,CAACO,IAAI,CAAC,CAAC;IACrCF,GAAG,CAACG,IAAI,CAACF,IAAI,CAAC;EAChB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdY,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;MAAEE,OAAO,EAAE;IAAmC,CAAC,CAAC;EACvE;AACF,CAAC,CAAC;AAEF7B,GAAG,CAAC8B,MAAM,CAAC7B,IAAI,EAAE,MAAMQ,OAAO,CAACC,GAAG,CAAE,0BAAyBT,IAAK,EAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}