{"ast":null,"code":"var _jsxFileName = \"/Users/kyliefuerbacher/Documents/GitHub/react-test/src/components/FileUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUploader = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [uploadStatus, setUploadStatus] = useState('idle'); // States: idle, uploading, done\n\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles);\n\n      // Initialize progress state for dropped files\n      const progressObj = {};\n      acceptedFiles.forEach(file => {\n        progressObj[file.name] = 0;\n      });\n      setUploadProgress(progressObj);\n    }\n  });\n  const handleUpload = () => {\n    setUploadStatus('uploading');\n\n    // Simulate file upload process\n    files.forEach(async file => {\n      const formData = new FormData();\n      formData.append('file', file);\n      try {\n        const response = await fetch('/upload', {\n          method: 'POST',\n          body: formData,\n          onUploadProgress: progressEvent => {\n            const progress = Math.round(progressEvent.loaded / progressEvent.total * 100);\n            setUploadProgress(prevProgress => ({\n              ...prevProgress,\n              [file.name]: progress\n            }));\n          }\n        });\n        if (response.ok) {\n          // Handle successful upload\n          console.log(`File ${file.name} uploaded successfully.`);\n        } else {\n          // Handle upload error\n          console.error(`Error uploading file ${file.name}.`);\n        }\n      } catch (error) {\n        console.error(`Error uploading file ${file.name}: ${error.message}`);\n      }\n    });\n    setUploadStatus('done');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      className: \"drop-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), \"Drop files here\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), uploadStatus === 'uploading' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [file.name, \" - \", uploadProgress[file.name], \"%\", /*#__PURE__*/_jsxDEV(\"progress\", {\n          value: uploadProgress[file.name],\n          max: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)]\n      }, file.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: uploadStatus === 'uploading',\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUploader, \"ELvIy71zX2cG+zqlBWF5kEEUbo8=\", false, function () {\n  return [useDropzone];\n});\n_c = FileUploader;\nexport default FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["React","useState","useDropzone","jsxDEV","_jsxDEV","FileUploader","_s","files","setFiles","uploadProgress","setUploadProgress","uploadStatus","setUploadStatus","getRootProps","getInputProps","onDrop","acceptedFiles","progressObj","forEach","file","name","handleUpload","formData","FormData","append","response","fetch","method","body","onUploadProgress","progressEvent","progress","Math","round","loaded","total","prevProgress","ok","console","log","error","message","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","value","max","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/kyliefuerbacher/Documents/GitHub/react-test/src/components/FileUploader.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nconst FileUploader = () => {\n  const [files, setFiles] = useState([]);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [uploadStatus, setUploadStatus] = useState('idle'); // States: idle, uploading, done\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: (acceptedFiles) => {\n      setFiles(acceptedFiles);\n\n      // Initialize progress state for dropped files\n      const progressObj = {};\n      acceptedFiles.forEach(file => {\n        progressObj[file.name] = 0;\n      });\n      setUploadProgress(progressObj);\n    }\n  });\n\n  const handleUpload = () => {\n    setUploadStatus('uploading');\n\n    // Simulate file upload process\n    files.forEach(async (file) => {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      try {\n        const response = await fetch('/upload', {\n          method: 'POST',\n          body: formData,\n          onUploadProgress: (progressEvent) => {\n            const progress = Math.round((progressEvent.loaded / progressEvent.total) * 100);\n            setUploadProgress(prevProgress => ({\n              ...prevProgress,\n              [file.name]: progress\n            }));\n          }\n        });\n\n        if (response.ok) {\n          // Handle successful upload\n          console.log(`File ${file.name} uploaded successfully.`);\n        } else {\n          // Handle upload error\n          console.error(`Error uploading file ${file.name}.`);\n        }\n      } catch (error) {\n        console.error(`Error uploading file ${file.name}: ${error.message}`);\n      }\n    });\n\n    setUploadStatus('done');\n  };\n\n  return (\n    <div>\n      <div {...getRootProps()} className=\"drop-area\">\n        <input {...getInputProps()} />\n        Drop files here\n      </div>\n      {uploadStatus === 'uploading' && (\n        <div>\n          {files.map(file => (\n            <div key={file.name}>\n              {file.name} - {uploadProgress[file.name]}%\n              <progress value={uploadProgress[file.name]} max=\"100\" />\n            </div>\n          ))}\n        </div>\n      )}\n      <button onClick={handleUpload} disabled={uploadStatus === 'uploading'}>\n        Upload\n      </button>\n    </div>\n  );\n};\n\nexport default FileUploader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}